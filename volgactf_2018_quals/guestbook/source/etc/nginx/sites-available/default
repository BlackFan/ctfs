server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name _;
    server_tokens off;
    more_clear_headers Server;

    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 420 422 423 424 426 428 429 431 444 449 450 451 500 501 502 503 504 505 506 507 508 509 510 511 /error;

    location / {
        content_by_lua_block {
            local mysql = require "resty.mysql"
            local db, err = mysql:new()
            if not db then
                return ngx.redirect("/error")
            end

            db:set_timeout(1000)

            local ok, err, errcode, sqlstate = db:connect{
                host = "127.0.0.1",
                port = 3306,
                database = "taskdb",
                user = "task",
                password = "Bx10dzel7w4spDjty4VU"
            }

            if not ok then
                return ngx.redirect("/error")
            end

            ngx.req.read_body()
            local args = ngx.req.get_post_args()

            if (args["name"] and args["text"]) then
                res, err, errcode, sqlstate =
                    db:query(string.format("insert into `posts` (`date`, `name`, `text`) values (CURRENT_DATE(), %s, %s)", ngx.quote_sql_str(args["name"]), ngx.quote_sql_str(args["text"])))
                if not res then
                    return ngx.redirect("/error")
                end
            end

            res, err, errcode, sqlstate =
                db:query("select `date`, `name`, `text` from `posts` order by id desc limit 10")
            if not res then 
                return ngx.redirect("/error")
            end

            local f = io.open("/var/www/templates/post.html","rb")
            local post_t = f:read("*all")
            f:close()

            local posts = ""

            if res then
                for i,post in pairs(res) do 
                    post["name"] = post["name"]:gsub("<", "&lt;"):gsub(">", "&gt;"):gsub("\"","&quot;"):gsub("%%", "%%%%")
                    post["text"] = post["text"]:gsub("<", "&lt;"):gsub(">", "&gt;"):gsub("\"","&quot;"):gsub("%%", "%%%%")
                    posts = posts .. post_t:gsub("%%(%w+)%%", post)
                end
            end

            local ok, err = db:set_keepalive(10000, 100)
            if not ok then
                return ngx.redirect("/error")
            end

            f = io.open("/var/www/templates/index.html", "rb")
            content = f:read("*all")
            f:close()

            ngx.header["Content-Type"] = "text/html"
            content = string.gsub(content, "%%posts%%", posts)
            ngx.print(content)
        }
    }

    location = /error {
        content_by_lua_block {
            local file = "/var/www/templates/error.html"
            local f = io.open(file, "rb")
            local content = f:read("*all")
            f:close()

            ngx.header["Content-Type"] = "text/html"
            ngx.print(content)
        }
    }

    location = /search {
        content_by_lua_block {
            local mysql = require "resty.mysql"
            local db, err = mysql:new()
            if not db then
                return ngx.redirect("/error")
            end

            db:set_timeout(1000)

            local ok, err, errcode, sqlstate = db:connect{
                host = "127.0.0.1",
                port = 3306,
                database = "taskdb",
                user = "task",
                password = "Bx10dzel7w4spDjty4VU"
            }

            if not ok then
                return ngx.redirect("/error")
            end

            local search = ""
            if ngx.var.arg_search then
                search = assert(loadstring('return string.lower("' .. ngx.var.arg_search:gsub("%%", "%%%%") .. '"):gsub("<", "&lt;"):gsub(">", "&gt;"):gsub("\\"","&quot;")'))()
                res, err, errcode, sqlstate =
                    db:query(string.format("select `date`, `name`, `text` from `posts` where `text` like %s order by id desc limit 10", ngx.quote_sql_str("%" .. search .. "%")))
                if not res then
                    return ngx.redirect("/error")
                end
            end

            local f = io.open("/var/www/templates/post.html","rb")
            local post_t = f:read("*all")
            f:close()

            local posts = ""

            if res then
                for i,post in pairs(res) do 
                    post["name"] = post["name"]:gsub("<", "&lt;"):gsub(">", "&gt;"):gsub("\"","&quot;"):gsub("%%", "%%%%")
                    post["text"] = post["text"]:gsub("<", "&lt;"):gsub(">", "&gt;"):gsub("\"","&quot;"):gsub("%%", "%%%%")
                    posts = posts .. post_t:gsub("%%(%w+)%%", post)
                end
            end

            local ok, err = db:set_keepalive(10000, 100)
            if not ok then
                return ngx.redirect("/error")
            end

            f = io.open("/var/www/templates/search.html", "rb")
            local content = f:read("*all")
            f:close()

            ngx.header["Content-Type"] = "text/html"
            content = content:gsub("%%posts%%", posts):gsub("%%search%%", search)
            ngx.print(content)
            return
        }
    }
}